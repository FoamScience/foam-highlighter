/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.1                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      sampleDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

sets
(
    // x axes N1 ?{\color{orange} upstream profile} $\nabla . \vec{v}$\tikzmark{code}?
    fig7_x_037
    {
        type            uniform;
        axis            distance;
        start           (0.25482  0.0    0.00016);
        end             (0.25482  0.0128 0.00016);
        nPoints         100;
    }

    fig7_x_05
    {
        type            uniform;
        axis            distance;
        start           (0.2544  0.0    0.00016);
        end             (0.2544  0.0128 0.00016);
        nPoints         100;
    }
);


functions
{
    #include     "file.cfg"
    #includeFunc MachNo
    #includeFunc residuals
}

dimensions [1 -1 2 0 0 0];
dimensions [m^2 s^-2];

scheme Gauss something 1.0;

key "Cool string with spaces";
key "Cool string\\n with spaces";
".*Wall" 1.0;

//- Max skewness allowed. Set to <0 to disable.
number 5;
number .5;
number -1.25;
number 5.0e13;
number -5.0E-13;

scheme Gauss1;
div(phi,U1) K;
laplacian((1|A(U+v)*D-mT),p) Gauss linear corrected;

option1 off;
option2 on;
option3 true;
option4 false;

var         $PO;
var         $../../some/file/path;
div(phi,U0) $..DK;
div(phi,U1) $.. DK;
div(phi,U2) $..DK Gauss;

emptyCode #{  #};

code
#{
    /*
       This will not fail if #{ shows up here ? {\color{orange} outside a string literal} ?
       #} also works as expected
    */
    #include<vector>
    #include "someFile.H"

    {
        int t = this ? 1 : -1;
        os << vector(-::sin($angle), 0, ::cos($angle));
        os << "#{ example #}";
    }
#};

codeInclude #{ #include "vector.H" #};

code
#{
    pointField points(30);
    points[0]  = point(0.5, 0, -0.5);
#};
